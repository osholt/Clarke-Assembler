Version 1.0
Release: 2015-12-23
Creator: Oliver Holt (osholt@me.com)
This program (Assembler.exe) was created by osholt for use with the instruction set created by Dr Clarke for use with the processors designed in unit EE20021 Digital Systems Design at the University of Bath in Academic Year 2015/16. Its output is formatted such that it can be directly uploaded to the on system memory of the Altera Cyclone V FPGAs used in the course via Quartus.

It is designed to improve, in some ways, on the fucntionality provided by Dr Clarke in his assembler, Hra.exe; other featurees have been intentionally omitted.

Usage:
	Assembler.exe [-d] inputFileName outputFileName
	-d is an optional flag that will show debug information and other useful information.
	inputFileName is the name of your assembly code file in the same directory as Assembler.exe. This should not be called temp.txt.
	outputFileName is the name of the file you want the assmbled code output to in the same directory as Assembler.exe. This should not be called temp.txt.

Features added:
	Labels: conditional jumps can now use labels instead of fixed numbers. A label must be terminated with a colon (':'), contain 	no whitespace characters and not be immediatly followed by another label. For example 'START: LIU R1, 0x0F' is legal but START: END: LIU R1, 0x0F is not. Labels are case sensitive and use of punctuation characters within label names is discouraged but probably legal. There can be as many whitespace characters (including new lines) or comments as desired between the terminating colon and the begining of the next instruction; this allows for proper indenting of loops within the input file. To use a label in a jump, simply use the format 'JR <condition>, <label>', for example 'JR A, START'. Of course jumps without labels still work as expected. Please note that if the jump to a label is more than 255 lines back or 256 lines forward then it will fail due to limitations of the assembly language. Chained jumps would be required to overcome this.
	
	Stripped input: A new file, temp.txt, is generated by the program that is the same as the input file but has all the commments and unneeded whitespace removed so that line numbers in the file correspond to the instruction number. This can be usful for debugging.
	
Features removed:
	Masks: masks were only included in Hra to allow the assembly code to run on slightly broken ALUs. As most of the msaks broke conditional jumps completely, it was decided they were not worth keeping as the major additional feature (labels) would be wasted with the use of masks. This does however mean the ALU MUST BE COMPLETELY WORKING for this assembler to generate  hex file that will defintiely work.
	
	Sanity checks: certain sanity checks (eg invalid register addresses and number lengths) are not present in this assembler. They may be added in a future version. Maybe you could add them?
	
	Special Register Names: Special register names (FL and PC) have not been included and so will not assemble code using them in place of actual register numbers. This could be added reasonably easily in a future version.
	
	Deliminating whitespace: while not explicity part of the specification, Hra would assemble could with such as 'JR A,5' with no space after the comma. A space is required and enforced in Assembler.exe.

Assembly Code:	
	The assembler specification was taken from the document 'EE20021 highRisc Processor instruction set definition - updated.docx' which was written by Dr Clarke and found on the unit's Moodle page. It should be bundled with this file.

	The assembler code usage is further defined in the document 'EE20021 Digital Systems Design week 9 tutorial.pdf' which gives usage and style guidelines. It too should be bundled with this file. Other than deviations mentioned in this file, Assembly code written with ththe help fot these 2 documents will work with this assembler.

Other Quirks:
	The following quirks and nuances are inherently present in this assembly code.
	
	JR: The instruction immediatly after a JR instruction will be executed before the jump takes place. It is important to add a line of padding (NOP in other assembly languages) after a JR to avoid unintedned behaviour. This can usually be achieved using an instruction like 'LIL R60, 0' where R60 is otherwise unused. 
	
	JR: When using a literal number to jump, a jump of 0 will cause the next line to be executed and a jump of -1 will cause the JR instruction to be executed again; therefore the number of instructions needed to be jumped should be counted from the instruction AFTER the jump. Use labels instead if this confuses you. You should be using labels.
	
	LOAD: The LOAD instruction must be executed sequentially twice in order for the memory on the FPGA to clock correctly.
	
	Numbers: Numbers may be presented in either decimal (no prefix), hexadecimal (0x or 0X prefix) or octal (0).
	